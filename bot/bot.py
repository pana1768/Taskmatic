import telebot
import states.states as states
import buttons.buttons as buttons
from telebot.storage import StateMemoryStorage
from telebot import custom_filters
import db.db as db
import logging
import telebot.types as types
logging.basicConfig(level=logging.WARNING, filename="py_log.log",filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s")
msg_id = None
state_storage = StateMemoryStorage()
bot = telebot.TeleBot('6652605107:AAFLxE_GAkvr-HC4AKW3h_WotvYYiOBrSdk',state_storage=state_storage)

def main():
    
    @bot.message_handler(commands=['jointogroup'])
    def join(message):
        if db.check_user(message.chat.id):
            bot.set_state(message.from_user.id, states.RandomStates.register, message.chat.id)
            bot.send_message(message.chat.id,"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Taskmatic!\n"
                         "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–¥–æ–±–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –∏ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏—Ö —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø.\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –∞ –ø–æ—Å–ª–µ —Å–Ω–æ–≤–∞ –≤—ã–∑–æ–≤–∏—Ç–µ")
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ãüÜî")
            bot.register_next_step_handler(message,join_to_group)
    def join_to_group(message):
        if db.join_group(message.text, message.chat.id):
            bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –≤ –≥—Ä—É–ø–ø—É‚úÖ")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã")
    
    
    
    @bot.message_handler(commands=['start'])
    def check_register(message):
        if db.check_user(message.chat.id):
            bot.set_state(message.from_user.id, states.RandomStates.register, message.chat.id)
            bot.send_message(message.chat.id,"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Taskmatic!‚ù§\n"
                         "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–¥–æ–±–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –∏ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏—Ö —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø.\n"
                         "\n"
                         "–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞!\n"
                         "1)/start ‚Äì –±–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç. –°–Ω–∞—á–∞–ª–∞ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–∞\n"
                         "\n"
                         "2)/joingroup  - –∫–æ–º–∞–Ω–¥–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –í–∞–º –Ω—É–∂–µ–Ω ID –≥—Ä—É–ø–ø—ã! –ï–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —É –í–∞—à–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è\n"
                         '\n'
                         "–ê —Ç–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–∞–º–∏üí¨\n"
                         "–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ì—Ä—É–ø–ø—ã¬ª, –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ –≥—Ä—É–ø–ø—ã¬ª –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É. –í —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –≥—Ä—É–ø–ø—ã¬ª –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –í—ã –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–≥–æ –í—ã —Å–º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –í–∞—à–∏—Ö –≥—Ä—É–ø–ø.\n"
                         "\n"  
                         "–ü–æ–º–∏–º–æ —Ä–∞–∑–¥–µ–ª–∞ ¬´–ì—Ä—É–ø–ø—ã¬ª –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–ó–∞–¥–∞–Ω–∏—è¬ª. –í –Ω—ë–º –í—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –æ–±–æ–∑–Ω–∞—á–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫). –í—ã–±–∏—Ä–∞—è —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞, —É –í–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ï—Å–ª–∏ –∂–µ –í—ã –≤—ã–±–µ—Ä–µ—Ç–µ —Ä–æ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, —Ç–æ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏ –í–∞—à–∏—Ö –≥—Ä—É–ø–ø.\n"
                         "\n"
                         "–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! –£–¥–∞—á–∏!‚ù§")
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ãüí¨")
        else:
            bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)
            bot.send_message(message.chat.id,"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–¥–æ–±–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –∏ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏—Ö —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.üìù\n"
                             "\n"
                             "–°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É, –¥–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–±–ª–∏–∫—É–π—Ç–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å –∏ —Ä–µ—à–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–∞–π–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ—à–µ–Ω–∏—è, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ —Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ Taskmatic!‚ù§\n",reply_markup=buttons.choosepoint_markup)
        
    @bot.message_handler(state=states.RandomStates.register)
    def register(message):
        a = "@" + message.from_user.username
        db.register_user(message.chat.id,message.text,a)
        bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî", reply_markup=buttons.choosepoint_markup)

    @bot.message_handler(state=states.RandomStates.start_work)
    def start_work(message):
        if message.text == '–ì—Ä—É–ø–ø—ã':
            bot.set_state(message.from_user.id, states.Groups.choosertype, message.chat.id)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.chooseaction_markup)
        else:
            bot.set_state(message.from_user.id, states.Tasks.choserole, message.chat.id)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.chooserole_markup)
        #—Ç–∞—Å–∫–∏
        
        
    @bot.message_handler(state=states.Groups.choosertype)
    def choosetype(message):
        if message.text == "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É":
            bot.set_state(message.from_user.id, states.CreateGroup.entername)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ãüí¨")
        elif message.text == '–ú–æ–∏ –≥—Ä—É–ø–ø—ã':
            bot.set_state(message.from_user.id, states.Groups.chooserole)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—åüé≠",reply_markup=buttons.chooserole_markup)
        else:
            bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.choosepoint_markup)
            
    @bot.message_handler(state=states.Groups.chooserole)
    def choserole(message):
        if message.text == '–Ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å':
            bot.set_state(message.from_user.id, states.Groups.chooseactionadmin)
            #–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.yarukoblud_markup)
        elif message.text == '–Ø —É—á–∞—Å—Ç–Ω–∏–∫':
            list_of_groups = db.get_executor_group(message.chat.id)
            if len(list_of_groups) == 0:
                bot.send_message(message.chat.id,'–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ‚ùå',reply_markup=buttons.chooserole_markup)
            else:
                inline_groups_markup = buttons.inline_get_list_executor(list_of_groups)
                bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—Éüë•', reply_markup=inline_groups_markup)
            
            
        else:
            bot.set_state(message.from_user.id, states.Groups.choosertype)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.chooseaction_markup)
        #–¥–æ–¥–µ–ª–∞—Ç—å

    @bot.message_handler(state=states.Groups.chooseactionadmin)
    def chooseactionadmin(message):
        if message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä":
            grouplist = db.get_admin_groups(message.chat.id)
            if grouplist == 'You haven`t group':
                bot.send_message(message.chat.id,"–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø",reply_markup=buttons.chooserole_markup)
                bot.set_state(message.from_user.id, states.Groups.chooserole)
            else:
                keylist_markup = buttons.inline_get_list(grouplist)
                bot.send_message(message.chat.id,"–í–∞—à–∏ –≥—Ä—É–ø–ø—ãüë•",reply_markup=keylist_markup)
        elif message.text == '–ù–∞–∑–∞–¥':
            bot.set_state(message.from_user.id, states.Groups.chooserole)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—åüé≠",reply_markup=buttons.chooserole_markup)
        else:
            grouplist = db.get_admin_groups(message.chat.id)
            if grouplist == 'You haven`t group':
                bot.send_message(message.chat.id,"–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø",reply_markup=buttons.chooserole_markup)
                bot.set_state(message.from_user.id, states.Groups.chooserole)
            else:
                grouplist = db.get_admin_groups(message.chat.id)
                keylist_markup = buttons.inline_get_list_edit(grouplist)
                bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—Éüë•",reply_markup=keylist_markup)
            
    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'adminedit')
    def get_group_info(call):
        group_id = call.data.split('_')[1]
        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:
            data['group_id'] = group_id
        bot.set_state(call.from_user.id, states.Groups.edit)
        bot.send_message(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",parse_mode='HTML',reply_markup=buttons.changegr_markup)
        
    
    @bot.message_handler(state=states.Groups.edit)
    def editGroup(message):
        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
            group_id = data['group_id']
        if message.text == '–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É':
            db.delete_group(group_id)
            bot.send_message(message.chat.id, "–í—ã —É–¥–∞–ª–∏–ª–∏ –≥—Ä—É–ø–ø—É‚úÖ")
        elif message.text == '–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞':
            bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username üÜî')
            bot.set_state(message.from_user.id, states.Groups.wait_username)
        else:
            bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.yarukoblud_markup)
            bot.set_state(message.from_user.id, states.Groups.chooseactionadmin)
            
    @bot.message_handler(state=states.Groups.wait_username)
    def user_delete(message):
        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
            group_id = data['group_id']
        rez = db.delete_member(message.text,group_id)
        if rez == 0:
            bot.send_message(message.chat.id,'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùå')
        else:
            bot.send_message(message.chat.id,'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω‚úÖ')
            bot.set_state(message.from_user.id, states.Groups.edit)
            bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",parse_mode='HTML',reply_markup=buttons.changegr_markup)
        
    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'admin')
    def get_group_info(call):
        group_id = call.data.split('_')[1]
        text_group = db.info_groups(group_id)
        bot.send_message(call.message.chat.id,text_group,parse_mode='HTML',reply_markup=buttons.backup_markup)
        
        
        
    @bot.message_handler(state=states.CreateGroup.entername)
    def entername(message):
        if not db.check_doubled_name(message.chat.id,message.text):
            bot.send_message(message.chat.id,'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤–æ–µ‚ùå')
        elif '_' in message.text:
            bot.send_message(message.chat.id,'–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ‚ùå')
        else:
            db.create_group(message.text,message.chat.id)
            invite_id = "–¢–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã: " + message.text +"_"+ str(db.get_id_group(message.chat.id,message.text))
            bot.send_message(message.chat.id,invite_id,reply_markup=buttons.choosepoint_markup)
            bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)

    

    
    
    
    
    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'executor')
    def chose_group_executor(call):
        group_id = call.data.split('_')[1]
        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:
            data['group_id'] = group_id
        bot.set_state(call.from_user.id, states.RandomStates.chose_leave)
        bot.send_message(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.uchastchange_markup)
        
    @bot.message_handler(state= states.RandomStates.chose_leave)
    def chose_executor_reaction(message):
        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
            group_id = data['group_id']
        if message.text == '–í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã‚ùå':
            db.leave_group(group_id,message.chat.id)
            bot.set_state(message.from_user.id, states.Groups.chooserole)
            bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã‚úÖ",reply_markup=buttons.chooserole_markup)
        else:
            bot.set_state(message.from_user.id, states.Groups.chooserole)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—åüé≠",reply_markup=buttons.chooserole_markup)
    
    
    
    
    
    @bot.message_handler(state= states.Tasks.choserole)
    def chsrole(message):
        if message.text == '–Ø —É—á–∞—Å—Ç–Ω–∏–∫':
            bot.set_state(message.from_user.id, states.Tasks.choseactionmember)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—åüìî",reply_markup=buttons.zadruk_markup)
        elif message.text == '–Ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å':
            bot.set_state(message.from_user.id, states.Tasks.choseactionadmin)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=buttons.zadruk_markup)
        else:
            bot.set_state(message.from_user.id, states.RandomStates.start_work)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=buttons.choosepoint_markup)
       
       
    @bot.message_handler(state= states.Tasks.choseactionadmin)  
    def hzhz(message):
        if message.text == '–ù–∞–∑–∞–¥':
            bot.set_state(message.from_user.id, states.Tasks.choserole, message.chat.id)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—åüìî", reply_markup=buttons.chooserole_markup)
        #     list_of_groups = db.get_executor_group(message.chat.id)
        #     if len(list_of_groups) == 0:
        #         bot.send_message(message.chat.id,'–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–µ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ',reply_markup=buttons.chooserole_markup)
        #     else:
        #         inline_groups_markup_tasks = buttons.inline_get_list_executor_tasks(list_of_groups)
        #         bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=inline_groups_markup_tasks)
        # elif message.text == '–°–≤–æ–±–æ–¥–Ω—ã–µ':
        #     list_of_groups = db.get_executor_group(message.chat.id)
        #     if len(list_of_groups) == 0:
        #         bot.send_message(message.chat.id,'–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–µ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ',reply_markup=buttons.chooserole_markup)
        elif message.text == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
            
            list_of_groups = db.get_admin_groups(message.chat.id)
            if list_of_groups == 'You haven`t group':
                bot.send_message(message.chat.id,"–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø",reply_markup=buttons.chooserole_markup)
                bot.set_state(message.from_user.id, states.Tasks.choserole)
            inline_groups_markup_tasks = buttons.inline_get_list_admin_process(list_of_groups)
            bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=inline_groups_markup_tasks)
        else:
            bot.send_message(message.chat.id,'–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞... –ù–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è!')
            
            
    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'adminprocesstasks')
    def sajdnnc(call):
        group_id = call.data.split('_')[1]
        string = "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Å–∫–∏:\n"
        data = db.admin_in_processing(group_id)
        if len(data) == 0:
            string += "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            bot.send_message(call.message.chat.id,string)
            bot.set_state(call.from_user.id, states.Tasks.choseactionadmin)
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=buttons.zadruk_markup)
        else:
            for i in data:
                string += f"    {i['–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏']} - {i['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']}\n"
            bot.send_message(call.message.chat.id,string)
            bot.set_state(call.from_user.id, states.Tasks.choseactionadmin)
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=buttons.zadruk_markup)
         
         
    @bot.message_handler(state= states.Tasks.choseactionmember)
    def yahz(message):
        if message.text == '–°–æ–∑–¥–∞—Ç—å':
            list_of_groups = db.get_executor_group(message.chat.id)
            if len(list_of_groups) == 0:
                bot.send_message(message.chat.id,'–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ‚ùå',reply_markup=buttons.chooserole_markup)
            else:
                inline_groups_markup_tasks = buttons.inline_get_list_executor_tasks(list_of_groups)
                bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—Éüë•', reply_markup=inline_groups_markup_tasks)
        elif message.text == '–°–≤–æ–±–æ–¥–Ω—ã–µ':
            list_of_groups = db.get_executor_group(message.chat.id)
            if len(list_of_groups) == 0:
                bot.send_message(message.chat.id,'–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ‚ùå',reply_markup=buttons.chooserole_markup)
            else:
                inline_groups_markup_tasks = buttons.inline_get_list_executor_free_tasks(list_of_groups)
                bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—Éüë•', reply_markup=inline_groups_markup_tasks)
        
        
    
        
        
        elif message.text == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
            a = db.get_tasks_user(message.chat.id)
            if len(a) == 0:
                bot.send_message(message.chat.id,"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á",reply_markup=buttons.zadruk_markup)
            else:
                with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
                    data['all_pages'] = len(a)
                    data['page'] = 1
                    pagination = types.InlineKeyboardButton(f'{data["page"]}/{data["all_pages"]}',callback_data='send_inlinelist')
                    send = types.InlineKeyboardButton('–°–¥–∞—Ç—å',callback_data='send_inlinelist')
                    right = types.InlineKeyboardButton('->',callback_data='right_inlinelist')
                    left = types.InlineKeyboardButton('<-',callback_data='left_inlinelist')
                    markup_pages = types.InlineKeyboardMarkup()
                    markup_pages.row(send)
                    markup_pages.row(left,pagination,right)
                    bot.send_message(message.chat.id,a[data['page']-1]['string'], reply_markup=markup_pages,parse_mode="HTML")
        else:
            bot.set_state(message.from_user.id, states.Tasks.choserole)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—åüé≠",reply_markup=buttons.chooserole_markup)
    
    
    
    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'executorfreetasks')
    def chose_group_executor(call):
        group_id = call.data.split('_')[1]
        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:
            data['group_id'] = group_id
            a = db.get_free_task(group_id)
            if len(a) != 0:
                data['all_pages'] = len(a)
                data['page'] = 1
                pagination = types.InlineKeyboardButton(f'{data["page"]}/{data["all_pages"]}',callback_data='send_inlinelistfree')
                settask = types.InlineKeyboardButton('–≤–∑—è—Ç—å',callback_data='settask_inlinelistfree')
                right = types.InlineKeyboardButton('->',callback_data='right_inlinelistfree')
                left = types.InlineKeyboardButton('<-',callback_data='left_inlinelistfree')
                markup_pages = types.InlineKeyboardMarkup()
                markup_pages.row(settask)
                markup_pages.row(left,pagination,right)
                bot.send_message(call.message.chat.id,a[data['page']-1]['string'], reply_markup=markup_pages,parse_mode="HTML")
            else:
                bot.send_message(call.message.chat.id,'–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π‚ùå',reply_markup=buttons.zadruk_markup)
                bot.set_state(call.from_user.id, states.Tasks.choseactionmember)

    @bot.callback_query_handler(func=lambda call: call.data.split('_')[1] == 'inlinelistfree')
    def chose_group_executor(call):
        cmd = call.data.split('_')[0]
        
        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:
            a = db.get_free_task(data['group_id'])
            print(a)
            all_pages = data['all_pages']
            cur_page = data['page']
            if cmd == 'right':
                if data['page'] + 1 <= data['all_pages']:
                    data['page']+=1
                    pagination = types.InlineKeyboardButton(f'{data["page"]}/{data["all_pages"]}',callback_data='send_inlinelistfree')
                    settask = types.InlineKeyboardButton('–≤–∑—è—Ç—å',callback_data='settask_inlinelistfree')
                    right = types.InlineKeyboardButton('->',callback_data='right_inlinelistfree')
                    left = types.InlineKeyboardButton('<-',callback_data='left_inlinelistfree')
                    markup_pages = types.InlineKeyboardMarkup()
                    markup_pages.row(settask)
                    markup_pages.row(left,pagination,right)
                    bot.edit_message_text(a[data['page']-1]['string'], reply_markup = markup_pages, chat_id=call.message.chat.id, message_id=call.message.message_id,parse_mode="HTML")
            elif cmd == 'left':
                if data['page'] - 1 > 0:
                    data['page'] -= 1
                    pagination = types.InlineKeyboardButton(f'{data["page"]}/{data["all_pages"]}',callback_data='send_inlinelistfree')
                    settask = types.InlineKeyboardButton('–≤–∑—è—Ç—å',callback_data='settask_inlinelistfree')
                    right = types.InlineKeyboardButton('->',callback_data='right_inlinelistfree')
                    left = types.InlineKeyboardButton('<-',callback_data='left_inlinelistfree')
                    markup_pages = types.InlineKeyboardMarkup()
                    markup_pages.row(settask)
                    markup_pages.row(left,pagination,right)
                    bot.edit_message_text(a[data['page']-1]['string'], reply_markup = markup_pages, chat_id=call.message.chat.id, message_id=call.message.message_id,parse_mode="HTML")
            elif cmd == 'settask':
                db.take_free_task(call.message.chat.id,a[data['page']-1]['task_id'])
                bot.send_message(call.message.chat.id,"–í—ã —Å—Ç–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞–¥–∞–Ω–∏—è‚úÖ")
            elif data['all_pages'] == 0:
                bot.send_message(call.message.chat.id,'–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π‚ùå',reply_markup=buttons.zadruk_markup)
                bot.set_state(call.from_user.id, states.Tasks.choseactionmember)
        
    
    @bot.callback_query_handler(func=lambda call: call.data.split('_')[1] == 'inlinelist')
    def chose_group_executor(call):
        cmd = call.data.split('_')[0]
        a = db.get_tasks_user(call.message.chat.id)
        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:
            all_pages = data['all_pages']
            cur_page = data['page']
            if cmd == 'right':
                if data['page'] + 1 <= data['all_pages']:
                    data['page']+=1
                    pagination = types.InlineKeyboardButton(f'{data["page"]}/{data["all_pages"]}',callback_data='send_inlinelist')
                    send = types.InlineKeyboardButton('–°–¥–∞—Ç—å',callback_data='send_inlinelist')
                    right = types.InlineKeyboardButton('->',callback_data='right_inlinelist')
                    left = types.InlineKeyboardButton('<-',callback_data='left_inlinelist')
                    markup_pages = types.InlineKeyboardMarkup()
                    markup_pages.row(send)
                    markup_pages.row(left,pagination,right)
                    bot.edit_message_text(a[data['page']-1]['string'], reply_markup = markup_pages, chat_id=call.message.chat.id, message_id=call.message.message_id,parse_mode="HTML")
            elif cmd == 'left':
                if data['page'] - 1 > 0:
                    data['page'] -= 1
                    pagination = types.InlineKeyboardButton(f'{data["page"]}/{data["all_pages"]}',callback_data='send_inlinelist')
                    send = types.InlineKeyboardButton('–°–¥–∞—Ç—å',callback_data='send_inlinelist')
                    right = types.InlineKeyboardButton('->',callback_data='right_inlinelist')
                    left = types.InlineKeyboardButton('<-',callback_data='left_inlinelist')
                    markup_pages = types.InlineKeyboardMarkup()
                    markup_pages.row(send)
                    markup_pages.row(left,pagination,right)
                    bot.edit_message_text(a[data['page']-1]['string'], reply_markup = markup_pages, chat_id=call.message.chat.id, message_id=call.message.message_id,parse_mode="HTML")
            elif cmd == 'send':
                bot.set_state(call.from_user.id, states.Tasks.createreview)
                bot.send_message(call.message.chat.id,"–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á—ë—Çüìî.\n" 
                    "–û—Ç—á—ë—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n" 
                    "1. –ó–¥–∞—á—É\n"
                    "2. –¶–µ–ª—å\n"
                    "3. –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
                    "4. –ò—Ç–æ–≥\n")
                page = int(data['page'])-1
                data['cur_task_id'] = a[page]['task_id']
            elif data['all_pages'] == 0:
                bot.send_message(call.message.chat.id,'–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π‚ùå',reply_markup=buttons.zadruk_markup)
                bot.set_state(call.from_user.id, states.Tasks.choseactionmember)
        
        
        
    
    @bot.message_handler(state= states.Tasks.createreview)
    def vlxijvbf(message):
            with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
                    task = data['cur_task_id']
                    db.send_review(task, message.text)
                    bot.send_message(message.chat.id,'–í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç‚úÖ',reply_markup=buttons.zadruk_markup)
                    bot.set_state(message.from_user.id, states.Tasks.choseactionmember)
                    
    
    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'executortasks')
    def chose_group_executor(call):
        group_id = call.data.split('_')[1]
        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:
            data['group_id'] = group_id
        bot.set_state(call.from_user.id, states.Tasks.name)
        bot.send_message(call.message.chat.id,"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—èüí¨")
        
    @bot.message_handler(state= states.Tasks.name)
    def chose_executor_reaction(message):
        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
            data['task_name'] = message.text
        bot.set_state(message.from_user.id, states.Tasks.description)
        bot.send_message(message.chat.id,"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—èüí¨")
        
    @bot.message_handler(state= states.Tasks.description)
    def chose_executor_reaction(message):
        data_task = {}
        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
            data_task['task_description'] = message.text
            data_task['task_name'] = data['task_name']
            data_task['task_group'] = data['group_id']
            data_task['user_id'] = message.chat.id
            data['full_dict'] = data_task
        # db.add_task_user(data_task)
        string = ''
        string = "–í–∞—à–∞ –∑–∞–¥–∞—á–∞:\n" + f"–ò–º—è - {data_task['task_name']}\n" + f"–û–ø–∏—Å–∞–Ω–∏–µ - {data_task['task_description']}\n"
        bot.send_message(message.chat.id,string,reply_markup=buttons.zadacha_markup)
        bot.set_state(message.from_user.id, states.Tasks.wait)
        
    @bot.message_handler(state= states.Tasks.wait)
    def chose_executor_reaction(message):
        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
            data_parse = data['full_dict']
        if message.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            db.add_task_user(data_parse)
            bot.send_message(message.chat.id,'–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ‚úÖ',reply_markup=buttons.zadruk_markup)
            bot.set_state(message.from_user.id, states.Tasks.choseactionmember)
        elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å":
            bot.set_state(message.from_user.id, states.Tasks.choosechange)
            bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—èüí¨',reply_markup=buttons.changing_markup)
        else:
            bot.set_state(message.from_user.id, states.Tasks.choseactionmember)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.zadruk_markup)
            
            
            
    @bot.message_handler(state= states.Tasks.choosechange)
    def chose_executor_reaction(message):
        if message.text == "–ù–∞–∑–≤–∞–Ω–∏–µ":
            bot.set_state(message.from_user.id, states.Tasks.changename)
            bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µüí¨',reply_markup=None)
            
        else:
            bot.set_state(message.from_user.id, states.Tasks.changedesc)
            bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µüí¨',reply_markup=None)
            
    @bot.message_handler(state= states.Tasks.changename)
    def chose_executor_reaction(message):
        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
            data['full_dict']['task_name'] = message.text
        bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.zadacha_markup)
        bot.set_state(message.from_user.id, states.Tasks.wait)
        
            
    @bot.message_handler(state= states.Tasks.changedesc)
    def chose_executor_reaction(message):
        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:
            data['full_dict']['task_description'] = message.text
        bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìî",reply_markup=buttons.zadacha_markup)
        bot.set_state(message.from_user.id, states.Tasks.wait)
            
    
        
    
    bot.add_custom_filter(custom_filters.StateFilter(bot))
    bot.infinity_polling()
if __name__ == "__main__":
    main()

