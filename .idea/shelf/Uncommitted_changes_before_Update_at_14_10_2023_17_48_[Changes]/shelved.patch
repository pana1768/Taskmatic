Index: bot/bot.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import telebot\r\nimport states.states as states\r\nimport buttons.buttons as buttons\r\nfrom telebot.storage import StateMemoryStorage\r\nfrom telebot import custom_filters\r\nimport db.db as db\r\n\r\n\r\nstate_storage = StateMemoryStorage()\r\nbot = telebot.TeleBot('6652605107:AAFLxE_GAkvr-HC4AKW3h_WotvYYiOBrSdk',state_storage=state_storage)\r\n\r\ndef main():\r\n    @bot.message_handler(commands=['start'])\r\n    def check_register(message):\r\n        if db.check_user(message.chat.id):\r\n            bot.set_state(message.from_user.id, states.RandomStates.register, message.chat.id)\r\n            bot.send_message(message.chat.id,\"Добро пожаловать в Taskmatic!\\n\"\r\n                         \"Этот бот поможет вам удобно управлять задачами и быстро распределять их среди участников групп\\n\"\r\n                         \"Пожалуйста,введите свое имя для продолжения работы\")\r\n        else:\r\n            bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)\r\n        \r\n    @bot.message_handler(state=states.RandomStates.register)\r\n    def register(message):\r\n        db.register_user(message.chat.id,message.text)\r\n        bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)\r\n        \r\n\r\n    @bot.message_handler(state=states.RandomStates.chooseaction)\r\n    def choseact(message):\r\n        bot.send_message(message.chat.id,'kfivnoinismcf')\r\n        \r\n    \r\n    bot.add_custom_filter(custom_filters.StateFilter(bot))\r\n    bot.infinity_polling()\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bot/bot.py b/bot/bot.py
--- a/bot/bot.py	(revision 5f71352d360a077a27cccadf3d53a00258b7ca12)
+++ b/bot/bot.py	(date 1697294491824)
@@ -19,20 +19,40 @@
                          "Пожалуйста,введите свое имя для продолжения работы")
         else:
             bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)
-        
+            bot.send_message(message.chat.id,'Этот бот поможет вам удобно управлять задачами и быстро\n распределять их среди участников группы. Создайте группу, добавьте участников и побликуйте задачи, \n которые участники смогут выбрать и решить самостоятельно! Устанавливайте крайние даты решения,\n добавьте описание задач и работайте с другими функциями Taskmatic!',
+                             reply_markup=buttons.choosepoint_markup)
     @bot.message_handler(state=states.RandomStates.register)
     def register(message):
-        db.register_user(message.chat.id,message.text)
+        a = "@"+message.from_user.username
+        print(a)
+        db.register_user(message.chat.id,message.text,a)
         bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)
+        bot.send_message(message.chat.id,'Этот бот поможет вам удобно управлять задачами и быстро\n распределять их среди участников группы. Создайте группу, добавьте участников и побликуйте задачи, \n которые участники смогут выбрать и решить самостоятельно! Устанавливайте крайние даты решения,\n добавьте описание задач и работайте с другими функциями Taskmatic!',
+                             reply_markup=buttons.choosepoint_markup)
         
 
-    @bot.message_handler(state=states.RandomStates.chooseaction)
-    def choseact(message):
-        bot.send_message(message.chat.id,'kfivnoinismcf')
-        
-    
+    @bot.message_handler(state=states.RandomStates.start_work)
+    def start_work(message):
+        if message.text == 'Группы':
+            bot.set_state(message.from_user.id, states.Groups.choosertype, message.chat.id)
+            bot.send_message(message.chat.id, "Выберите действие:",reply_markup=buttons.chooseaction_markup)
+        else:
+            pass
+    @bot.message_handler(state=states.Groups.choosertype)
+    def choosetype(message):
+        if message.text == "Создать группу":
+            bot.set_state(message.from_user.id, states.CreateGroup.entername)
+            bot.send_message(message.chat.id, "Введите название группы:")
+        else:
+            pass
+    @bot.message_handler(state=states.CreateGroup.entername)
+    def entername(message):
+        if not db.check_doubled_name:
+            bot.send_message(message.chat.id,'У вас уже есть группа с таким названием, пожалуйста, придумайте новое')
+        else:
+            db.create_group(message.text,message.chat.id)
+            bot.send_message(message.chat.id, "Выберите действие")
     bot.add_custom_filter(custom_filters.StateFilter(bot))
     bot.infinity_polling()
 if __name__ == "__main__":
-    main()
-
+    main()
\ No newline at end of file
Index: bot/states/states.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from telebot.handler_backends import State, StatesGroup\r\n\r\n\r\nclass Groups(StatesGroup):\r\n    chooserole = State()\r\n    manager = State()\r\n    executor = State()\r\n    \r\nclass Tasks(StatesGroup):\r\n    chooserole = State()\r\n\r\n\r\n    \r\nclass RandomStates(StatesGroup):\r\n    chooseaction = State()\r\n    register = State()\r\n    start_work = State()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bot/states/states.py b/bot/states/states.py
--- a/bot/states/states.py	(revision 5f71352d360a077a27cccadf3d53a00258b7ca12)
+++ b/bot/states/states.py	(date 1697294491826)
@@ -2,14 +2,15 @@
 
 
 class Groups(StatesGroup):
-    chooserole = State()
+    choosertype = State()
     manager = State()
     executor = State()
     
 class Tasks(StatesGroup):
     chooserole = State()
 
-
+class CreateGroup(StatesGroup):
+    entername = State()
     
 class RandomStates(StatesGroup):
     chooseaction = State()
Index: bot/buttons/buttons.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import telebot\r\nfrom telebot import types\r\nchoosepoint_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\nsozdatgr_1 = types.KeyboardButton('Группы')\r\nmygroups_1 = types.KeyboardButton('Задания')\r\nchoosepoint_markup.add(sozdatgr_1, mygroups_1)\r\n\r\nchooserole_markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #это надо после кнопок \"Мои группы\", \"Создать группу\", \"Задания\"\r\nrukovoditel_2 = types.KeyboardButton('Я руководитель')\r\nuchastnik_2 = types.KeyboardButton('Я участник')\r\nnazad_2 = types.KeyboardButton('Назад')\r\nchooserole_markup.add(rukovoditel_2, uchastnik_2, zhopa_2)\r\n\r\nchooseaction_markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #это надо после кнопки \"Группы\"\r\nactgr1 = types.KeyboardButton('Мои группы')\r\nactgr2 = types.KeyboardButton('Создать группу')\r\nchooseaction_markup.add(actgr1, actgr2)\r\n\r\nzadacha_markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #это надо посое вывода задачи, составленной руководителем\r\nokzad = types.KeyboardButton('Сохранить')\r\nchangezad = types.KeyboardButton('Изменить')\r\nzadacha_markup.add(okzad, changezad)\r\n\r\nchanging_markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #это надо после кнопки \"изменить\"\r\nchangename = types.KeyboardButton('Название')\r\nchangedis = types.KeyboardButton('Описание')\r\nchangedd = types.KeyboardButton('Дедлайн')\r\nchanging_markup.add(changename, changedis, changedd)\r\n\r\notchet_markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #это надо после отправки отчета\r\nyes = types.KeyboardButton('Принять')\r\nno = types.KeyboardButton('Отклонить')\r\notchet_markup.add(yes, no)\r\n\r\nchesdelat_markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #это после того, как мы выбираем одну из задач из списка задач\r\nsdat = types.KeyboardButton('Сдать')\r\nkspisku = types.KeyboardButton('К списку') #после этой кнопки предыдущее сообщение удаляется\r\nchesdelat_markup.add(sdat, kspisku)\r\n\r\ndlyagrupp_markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #это создание группы\r\ndobavit = types.KeyboardButton('Добавить участника')\r\nsaving = types.KeyboardButton('Сохранить') #после этого пользователь возвращается на этап выбора \"Группы\" или \"Задания\"\r\ndlyagrupp_markup.add(dobavit, saving)\r\n\r\nzadruk_markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #это после кнопки \"Я руководитель\" в разделе \"Задания\"(!)\r\ncreate = types.KeyboardButton('Создать')\r\nfree = types.KeyboardButton('Свободные')\r\nactive = types.KeyboardButton('В процессе')\r\nzadruk_markup.add(create, free, active)\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bot/buttons/buttons.py b/bot/buttons/buttons.py
--- a/bot/buttons/buttons.py	(revision 5f71352d360a077a27cccadf3d53a00258b7ca12)
+++ b/bot/buttons/buttons.py	(date 1697294755431)
@@ -48,5 +48,7 @@
 active = types.KeyboardButton('В процессе')
 zadruk_markup.add(create, free, active)
 
-
-
+zadrab_markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #это после кнопки "Я участник" в разделе "Задания"
+free1 = types.KeyboardButton('Свободные')
+active1 = types.KeyboardButton('В процессе')
+zadrab_markup.add(free1, active1)
Index: db/model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sqlalchemy as sq\r\nfrom sqlalchemy.orm import declarative_base, relationship\r\n# from sqlalchemy import Table, Column, Integer, String, MetaData\r\n\r\n# meta_obj = MetaData()\r\nBase = declarative_base()\r\n\r\nclass Users(Base):\r\n    __tablename__ = 'registered_users'\r\n\r\n    user_id = sq.Column(sq.Integer, primary_key=True)\r\n    name = sq.Column(sq.String)\r\n    # groups = sq.Column(sq.Integer,sq.ForeignKey())\r\n\r\n    def __init__(self,user_id,name):\r\n        self.user_id = user_id\r\n        self.name = name\r\n\r\n\r\n\r\n    def __str__(self):\r\n        return f'{self.user_id}: {self.name}'\r\n\r\n#\r\n# class Tasks(Base):\r\n#     __tablename__ = 'tasks'\r\n#\r\n#     task_id = sq.Column(sq.Integer, primary_key=True, autoincrement=True)\r\n#     name_task = sq.Column(sq.String(length=40))\r\n#     description_task = sq.Column(sq.String(length=1000))\r\n#     user_take = sq.Column(sq.Integer)\r\n#\r\n#     # user = relationship(Users, backref='task')\r\n#     def __str__(self):\r\n#         return f'{self.task_id} : {self.name_task} : {self.description_task}'\r\n#\r\n# class AllGroup(Base):\r\n#     __tablename__ = 'all_group'\r\n#\r\n#     group_id = sq.Column(sq.Integer,primary_key=True)\r\n#     group_name = sq.Column(sq.String, unique=True)\r\n#     admin_id = sq.Column(sq.Integer, unique=True)\r\n#     # user_id = sq.Column(sq.Integer, )\r\n#\r\n#     # users = relationship(Users, backref=)\r\n#\r\n# class GroupExecutor(Base):\r\n#     __tablename__ = 'group_executor'\r\n#\r\n#     user_id = sq.Column(sq.Integer,primary_key=True)\r\n#     group_id = sq.Column(sq.Integer)\r\n#     group_name = sq.Column(sq.String)\r\n#\r\n#     # user = relationship(Users, backref='groupcutor')\r\ndef create_tables(engine):\r\n    # Base.metadata.drop_all(engine)\r\n    Base.metadata.create_all(engine)\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/db/model.py b/db/model.py
--- a/db/model.py	(revision 5f71352d360a077a27cccadf3d53a00258b7ca12)
+++ b/db/model.py	(date 1697294491829)
@@ -10,48 +10,63 @@
 
     user_id = sq.Column(sq.Integer, primary_key=True)
     name = sq.Column(sq.String)
+    username = sq.Column(sq.String)
     # groups = sq.Column(sq.Integer,sq.ForeignKey())
 
-    def __init__(self,user_id,name):
+    def __init__(self,user_id,name, username):
         self.user_id = user_id
         self.name = name
+        self.username = username
 
 
 
     def __str__(self):
         return f'{self.user_id}: {self.name}'
 
-#
-# class Tasks(Base):
-#     __tablename__ = 'tasks'
-#
-#     task_id = sq.Column(sq.Integer, primary_key=True, autoincrement=True)
-#     name_task = sq.Column(sq.String(length=40))
-#     description_task = sq.Column(sq.String(length=1000))
-#     user_take = sq.Column(sq.Integer)
-#
-#     # user = relationship(Users, backref='task')
-#     def __str__(self):
-#         return f'{self.task_id} : {self.name_task} : {self.description_task}'
-#
-# class AllGroup(Base):
-#     __tablename__ = 'all_group'
-#
-#     group_id = sq.Column(sq.Integer,primary_key=True)
-#     group_name = sq.Column(sq.String, unique=True)
-#     admin_id = sq.Column(sq.Integer, unique=True)
-#     # user_id = sq.Column(sq.Integer, )
-#
-#     # users = relationship(Users, backref=)
-#
-# class GroupExecutor(Base):
-#     __tablename__ = 'group_executor'
-#
-#     user_id = sq.Column(sq.Integer,primary_key=True)
-#     group_id = sq.Column(sq.Integer)
-#     group_name = sq.Column(sq.String)
-#
-#     # user = relationship(Users, backref='groupcutor')
+
+class Tasks(Base):
+    __tablename__ = 'tasks'
+
+    task_id = sq.Column(sq.Integer, primary_key=True, autoincrement=True)
+    name_task = sq.Column(sq.String(length=40))
+    description_task = sq.Column(sq.String(length=1000))
+    user_take = sq.Column(sq.Integer)
+
+    def __init__(self,task_id,name_task,description_task, user_take):
+        self.task_id = task_id
+        self.name_task = name_task
+        self.description_task = description_task
+        self.user_take = user_take
+
+    # user = relationship(Users, backref='task')
+    def __str__(self):
+        return f'{self.task_id} : {self.name_task} : {self.description_task}'
+
+class AllGroup(Base):
+    __tablename__ = 'all_group'
+
+    group_id = sq.Column(sq.Integer,primary_key=True)
+    group_name = sq.Column(sq.String)
+    admin_id = sq.Column(sq.Integer)
+    # user_id = sq.Column(sq.Integer, )
+
+    def __init__(self, group_name, admin_id):
+        self.group_name = group_name
+        self.admin_id = admin_id
+
+    # users = relationship(Users, backref=)
+
+class GroupExecutor(Base):
+    __tablename__ = 'group_executor'
+
+    user_id = sq.Column(sq.Integer,primary_key=True)
+    group_id = sq.Column(sq.Integer)
+
+    def __init__(self,user_id,group_id):
+        self.user_id = user_id
+        self.group_id = group_id
+
+    # user = relationship(Users, backref='groupcutor')
 def create_tables(engine):
     # Base.metadata.drop_all(engine)
     Base.metadata.create_all(engine)
Index: db/db.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sqlalchemy as sq\r\nfrom sqlalchemy.orm import sessionmaker\r\nfrom db.model import create_tables, Users\r\nDSN = 'postgresql://postgres:pana@localhost:5432/database'\r\nengine = sq.create_engine(DSN)\r\ncreate_tables(engine)\r\ndef make_session():\r\n    Session = sessionmaker(bind=engine)\r\n    session = Session()\r\n    return session\r\n\r\ndef register_user(user_id,name):\r\n    session = make_session()\r\n    reg = Users(user_id=user_id,name=name)\r\n    session.add(reg)\r\n    session.commit()\r\n    session.close()\r\n\r\n# def add_task(task_name, task_description):\r\n#     session = make_session()\r\n#     new_task = Tasks(name_task=task_name, description_task=task_description)\r\n#     session.add(new_task)\r\n#     session.commit()\r\n#     session.close()\r\n#\r\n# def user_take_task(task_id, user_id):\r\n#     session = make_session()\r\n#     take_task = session.query(Tasks).filter(Tasks.task_id == task_id).update({'user_take': user_id})\r\n#     session.commit()\r\n#     session.close()\r\n#\r\n# def create_group(name,admin):\r\n#     session = make_session()\r\n#     group = AllGroup(group_name=name,admin_id=admin)\r\n#     session.add(group)\r\n#     session.commit()\r\n#     session.close()\r\n\r\ndef check_user(user_id):\r\n    session = make_session()\r\n    if session.query(Users).filter(Users.user_id == user_id).all() == []:\r\n        session.close()\r\n        return True\r\n    else:\r\n        session.close()\r\n        return False\r\n\r\n\r\ndef add_executor(user_id,group_id):\r\n    pass\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/db/db.py b/db/db.py
--- a/db/db.py	(revision 5f71352d360a077a27cccadf3d53a00258b7ca12)
+++ b/db/db.py	(date 1697294491827)
@@ -1,6 +1,6 @@
 import sqlalchemy as sq
 from sqlalchemy.orm import sessionmaker
-from db.model import create_tables, Users
+from db.model import create_tables, Users, Tasks, GroupExecutor, AllGroup
 DSN = 'postgresql://postgres:pana@localhost:5432/database'
 engine = sq.create_engine(DSN)
 create_tables(engine)
@@ -9,32 +9,41 @@
     session = Session()
     return session
 
-def register_user(user_id,name):
+def register_user(user_id,name,username):
     session = make_session()
-    reg = Users(user_id=user_id,name=name)
+    reg = Users(user_id=user_id,name=name,username=username)
     session.add(reg)
     session.commit()
     session.close()
 
-# def add_task(task_name, task_description):
-#     session = make_session()
-#     new_task = Tasks(name_task=task_name, description_task=task_description)
-#     session.add(new_task)
-#     session.commit()
-#     session.close()
-#
-# def user_take_task(task_id, user_id):
-#     session = make_session()
-#     take_task = session.query(Tasks).filter(Tasks.task_id == task_id).update({'user_take': user_id})
-#     session.commit()
-#     session.close()
-#
-# def create_group(name,admin):
-#     session = make_session()
-#     group = AllGroup(group_name=name,admin_id=admin)
-#     session.add(group)
-#     session.commit()
-#     session.close()
+def add_task(task_name, task_description):
+    session = make_session()
+    new_task = Tasks(name_task=task_name, description_task=task_description)
+    session.add(new_task)
+    session.commit()
+    session.close()
+
+
+def user_take_task(task_id, user_id):
+    session = make_session()
+    take_task = session.query(Tasks).filter(Tasks.task_id == task_id).update({'user_take': user_id})
+    session.commit()
+    session.close()
+
+def create_group(name,admin):
+    session = make_session()
+    group = AllGroup(group_name=name,admin_id=admin)
+    session.add(group)
+    session.commit()
+    session.close()
+
+
+def check_doubled_name(admin_id, group_name):
+    session = make_session()
+    for c in session.query(AllGroup).filter(AllGroup.admin_id == admin_id).all():
+        if c.group_name == group_name:
+            return False
+    return True
 
 def check_user(user_id):
     session = make_session()
@@ -47,8 +56,4 @@
 
 
 def add_executor(user_id,group_id):
-    pass
-
-
-
-
+    pass
\ No newline at end of file
