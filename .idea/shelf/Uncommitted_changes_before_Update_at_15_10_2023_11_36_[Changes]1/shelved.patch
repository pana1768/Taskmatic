Index: bot/bot.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import telebot\r\nimport states.states as states\r\nimport buttons.buttons as buttons\r\nfrom telebot.storage import StateMemoryStorage\r\nfrom telebot import custom_filters\r\nimport db.db as db\r\nimport logging\r\nimport telebot.types as types\r\nlogging.basicConfig(level=logging.WARNING, filename=\"py_log.log\",filemode=\"w\",\r\n                    format=\"%(asctime)s %(levelname)s %(message)s\")\r\nmsg_id = None\r\nstate_storage = StateMemoryStorage()\r\nbot = telebot.TeleBot('6652605107:AAFLxE_GAkvr-HC4AKW3h_WotvYYiOBrSdk',state_storage=state_storage)\r\n\r\ndef main():\r\n    \r\n    @bot.message_handler(state='*',commands=['jointogroup'])\r\n    def join(message):\r\n        bot.send_message(message.chat.id, \"Введите идентификатор группы\")\r\n        bot.register_next_step_handler(message,join_to_group)\r\n    def join_to_group(message):\r\n        db.join_group(message.text, message.chat.id)\r\n        bot.send_message(message.chat.id, \"Вы успешно добавились в группу\")\r\n    \r\n    \r\n    \r\n    \r\n    @bot.message_handler(commands=['start'])\r\n    def check_register(message):\r\n        if db.check_user(message.chat.id):\r\n            bot.set_state(message.from_user.id, states.RandomStates.register, message.chat.id)\r\n            bot.send_message(message.chat.id,\"Добро пожаловать в Taskmatic!\\n\"\r\n                         \"Этот бот поможет вам удобно управлять задачами и быстро распределять их среди участников групп.\\n\"\r\n                         \"Пожалуйста, введите свое имя для продолжения работы\")\r\n        else:\r\n            bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)\r\n            bot.send_message(message.chat.id,\"Этот бот поможет вам удобно управлять задачами и\\n\"\r\n                             \"быстро распределять их среди участников группы.\\n\"\r\n                             \"Создайте группу, добавьте участников и побликуйте задачи,\\n\" \r\n                             \"которые участники смогут выбрать и решить самостоятельно!\\n\"\r\n                             \"Устанавливайте крайние даты решения, добавьте описание задач и\\n\" \r\n                             \"работайте с другими функциями Taskmatic!\\n\",reply_markup=buttons.choosepoint_markup)\r\n        \r\n    @bot.message_handler(state=states.RandomStates.register)\r\n    def register(message):\r\n        a = \"@\" + message.from_user.username\r\n        db.register_user(message.chat.id,message.text,a)\r\n        bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)\r\n        bot.send_message(message.chat.id, \"Выберите действие:\",reply_markup=buttons.choosepoint_markup)\r\n\r\n    @bot.message_handler(state=states.RandomStates.start_work)\r\n    def start_work(message):\r\n        if message.text == 'Группы':\r\n            bot.set_state(message.from_user.id, states.Groups.choosertype, message.chat.id)\r\n            bot.send_message(message.chat.id, \"Выберите действие:\",reply_markup=buttons.chooseaction_markup)\r\n        else:\r\n            bot.set_state(message.from_user.id, states.Tasks.choserole, message.chat.id)\r\n            bot.send_message(message.chat.id, \"Выберите действие:\",reply_markup=buttons.chooserole_markup)\r\n        #таски\r\n        \r\n        \r\n    @bot.message_handler(state=states.Groups.choosertype)\r\n    def choosetype(message):\r\n        if message.text == \"Создать группу\":\r\n            bot.set_state(message.from_user.id, states.CreateGroup.entername)\r\n            bot.send_message(message.chat.id, \"Введите название группы:\")\r\n        elif message.text == 'Мои группы':\r\n            bot.set_state(message.from_user.id, states.Groups.chooserole)\r\n            bot.send_message(message.chat.id, \"Выберите роль:\",reply_markup=buttons.chooserole_markup)\r\n        else:\r\n            bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)\r\n            bot.send_message(message.chat.id, \"Выберите действие:\",reply_markup=buttons.choosepoint_markup)\r\n            \r\n    @bot.message_handler(state=states.Groups.chooserole)\r\n    def choserole(message):\r\n        if message.text == 'Я руководитель':\r\n            bot.set_state(message.from_user.id, states.Groups.chooseactionadmin)\r\n            #добавить просмотр/редактировать\r\n            bot.send_message(message.chat.id,\"Выберите действие:\",reply_markup=buttons.yarukoblud_markup)\r\n        elif message.text == 'Я участник':\r\n            list_of_groups = db.get_executor_group(message.chat.id)\r\n            if len(list_of_groups) == 0:\r\n                bot.send_message(message.chat.id,'Вы не состоите не в одной группе',reply_markup=buttons.chooserole_markup)\r\n            else:\r\n                inline_groups_markup = buttons.inline_get_list_executor(list_of_groups)\r\n                bot.send_message(message.chat.id,'Выберите группу:', reply_markup=inline_groups_markup)\r\n            \r\n            \r\n        else:\r\n            bot.set_state(message.from_user.id, states.Groups.choosertype)\r\n            bot.send_message(message.chat.id, \"Выберите действие\",reply_markup=buttons.chooseaction_markup)\r\n        #доделать\r\n\r\n    @bot.message_handler(state=states.Groups.chooseactionadmin)\r\n    def chooseactionadmin(message):\r\n        if message.text == \"Просмотр\":\r\n            grouplist = db.get_admin_groups(message.chat.id)\r\n            keylist_markup = buttons.inline_get_list(grouplist)\r\n            bot.send_message(message.chat.id,\"Ваши группы\",reply_markup=keylist_markup)\r\n        elif message.text == 'Назад':\r\n            bot.set_state(message.from_user.id, states.Groups.chooserole)\r\n            bot.send_message(message.chat.id, \"Выберите роль\",reply_markup=buttons.chooserole_markup)\r\n        else:\r\n            grouplist = db.get_admin_groups(message.chat.id)\r\n            keylist_markup = buttons.inline_get_list_edit(grouplist)\r\n            bot.send_message(message.chat.id,\"Выберите группу:\",reply_markup=keylist_markup)\r\n            \r\n    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'adminedit')\r\n    def get_group_info(call):\r\n        group_id = call.data.split('_')[1]\r\n        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:\r\n            data['group_id'] = group_id\r\n        bot.set_state(call.from_user.id, states.Groups.edit)\r\n        bot.send_message(call.message.chat.id,\"Выберите действие\",parse_mode='HTML',reply_markup=buttons.changegr_markup)\r\n        \r\n    \r\n    @bot.message_handler(state=states.Groups.edit)\r\n    def editGroup(message):\r\n        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n            group_id = data['group_id']\r\n        if message.text == 'Удалить группу':\r\n            db.delete_group(group_id)\r\n            bot.send_message(message.chat.id, \"Вы удалили группу\")\r\n        elif message.text == 'Удалить участника':\r\n            bot.send_message(message.chat.id,'Введите никнейм участника в формате @username')\r\n            bot.set_state(message.from_user.id, states.Groups.wait_username)\r\n        else:\r\n            bot.send_message(message.chat.id,\"Выберите действие\",reply_markup=buttons.yarukoblud_markup)\r\n            bot.set_state(message.from_user.id, states.Groups.chooseactionadmin)\r\n            \r\n    @bot.message_handler(state=states.Groups.wait_username)\r\n    def user_delete(message):\r\n        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n            group_id = data['group_id']\r\n        rez = db.delete_member(message.text,group_id)\r\n        if rez == 0:\r\n            bot.send_message(message.chat.id,'Пользователь не найден')\r\n        else:\r\n            bot.send_message(message.chat.id,'Пользователь успешно удален')\r\n            bot.set_state(message.from_user.id, states.Groups.edit)\r\n            bot.send_message(message.chat.id,\"Выберите действие\",parse_mode='HTML',reply_markup=buttons.changegr_markup)\r\n        \r\n    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'admin')\r\n    def get_group_info(call):\r\n        group_id = call.data.split('_')[1]\r\n        text_group = db.info_groups(group_id)\r\n        bot.send_message(call.message.chat.id,text_group,parse_mode='HTML',reply_markup=buttons.backup_markup)\r\n        \r\n        \r\n        \r\n    @bot.message_handler(state=states.CreateGroup.entername)\r\n    def entername(message):\r\n        if not db.check_doubled_name(message.chat.id,message.text):\r\n            bot.send_message(message.chat.id,'У вас уже есть группа с таким названием, пожалуйста, придумайте новое')\r\n        else:\r\n            db.create_group(message.text,message.chat.id)\r\n            invite_id = \"Твой идентификатор группы: \" + message.text +\"_\"+ str(db.get_id_group(message.chat.id,message.text))\r\n            bot.send_message(message.chat.id,invite_id,reply_markup=buttons.choosepoint_markup)\r\n            bot.set_state(message.from_user.id, states.RandomStates.start_work, message.chat.id)\r\n\r\n    \r\n\r\n    \r\n    \r\n    \r\n    \r\n    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'executor')\r\n    def chose_group_executor(call):\r\n        group_id = call.data.split('_')[1]\r\n        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:\r\n            data['group_id'] = group_id\r\n        bot.set_state(call.from_user.id, states.RandomStates.chose_leave)\r\n        bot.send_message(call.message.chat.id,\"Выберите действие\",reply_markup=buttons.uchastchange_markup)\r\n        \r\n    @bot.message_handler(state= states.RandomStates.chose_leave)\r\n    def chose_executor_reaction(message):\r\n        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n            group_id = data['group_id']\r\n        if message.text == 'Выйти из группы':\r\n            db.leave_group(group_id,message.chat.id)\r\n            bot.set_state(message.from_user.id, states.Groups.chooserole)\r\n            bot.send_message(message.chat.id, \"Вы успешно вышли из группы\",reply_markup=buttons.chooserole_markup)\r\n        else:\r\n            bot.set_state(message.from_user.id, states.Groups.chooserole)\r\n            bot.send_message(message.chat.id, \"Выберите роль\",reply_markup=buttons.chooserole_markup)\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    @bot.message_handler(state= states.Tasks.choserole)\r\n    def chsrole(message):\r\n        if message.text == 'Я участник':\r\n            bot.set_state(message.from_user.id, states.Tasks.choseactionmember)\r\n            bot.send_message(message.chat.id, \"Выберите действие\",reply_markup=buttons.zadruk_markup)\r\n        elif message.text == 'Я руководитель':\r\n            pass\r\n        else:\r\n            bot.set_state(message.from_user.id, states.RandomStates.start_work)\r\n            bot.send_message(message.chat.id, \"Выберите действие\",reply_markup=buttons.choosepoint_markup)\r\n            \r\n    @bot.message_handler(state= states.Tasks.choseactionmember)\r\n    def yahz(message):\r\n        if message.text == 'Создать':\r\n            list_of_groups = db.get_executor_group(message.chat.id)\r\n            if len(list_of_groups) == 0:\r\n                bot.send_message(message.chat.id,'Вы не состоите не в одной группе',reply_markup=buttons.chooserole_markup)\r\n            else:\r\n                inline_groups_markup_tasks = buttons.inline_get_list_executor_tasks(list_of_groups)\r\n                bot.send_message(message.chat.id,'Выберите группу:', reply_markup=inline_groups_markup_tasks)\r\n        elif message.text == 'Свободные':\r\n            list_of_groups = db.get_executor_group(message.chat.id)\r\n            if len(list_of_groups) == 0:\r\n                bot.send_message(message.chat.id,'Вы не состоите не в одной группе',reply_markup=buttons.chooserole_markup)\r\n            else:\r\n                inline_groups_markup_tasks = buttons.inline_get_list_executor_free_tasks(list_of_groups)\r\n                bot.send_message(message.chat.id,'Выберите группу:', reply_markup=inline_groups_markup_tasks)\r\n        \r\n        \r\n    \r\n        \r\n        \r\n        elif message.text == 'В процессе':\r\n            a = db.get_tasks_user(message.chat.id)\r\n            with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n                data['all_pages'] = len(a)\r\n                data['page'] = 1\r\n                pagination = types.InlineKeyboardButton(f'{data[\"page\"]}/{data[\"all_pages\"]}',callback_data='send_inlinelist')\r\n                send = types.InlineKeyboardButton('Сдать',callback_data='send_inlinelist')\r\n                right = types.InlineKeyboardButton('->',callback_data='right_inlinelist')\r\n                left = types.InlineKeyboardButton('<-',callback_data='left_inlinelist')\r\n                markup_pages = types.InlineKeyboardMarkup()\r\n                markup_pages.row(send)\r\n                markup_pages.row(left,pagination,right)\r\n                bot.send_message(message.chat.id,a[data['page']-1], reply_markup=markup_pages,parse_mode=\"HTML\")\r\n        else:\r\n            bot.set_state(message.from_user.id, states.Groups.chooserole)\r\n            bot.send_message(message.chat.id, \"Выберите роль\",reply_markup=buttons.chooserole_markup)\r\n    \r\n    \r\n    \r\n    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'executorfreetasks')\r\n    def chose_group_executor(call):\r\n        group_id = call.data.split('_')[1]\r\n        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:\r\n            data['group_id'] = group_id\r\n            a = db.get_free_task(group_id)\r\n            data['all_pages'] = len(a)\r\n            data['page'] = 1\r\n            pagination = types.InlineKeyboardButton(f'{data[\"page\"]}/{data[\"all_pages\"]}',callback_data='send_inlinelistfree')\r\n            settask = types.InlineKeyboardButton('взять',callback_data='settask_inlinelistfree')\r\n            right = types.InlineKeyboardButton('->',callback_data='right_inlinelistfree')\r\n            left = types.InlineKeyboardButton('<-',callback_data='left_inlinelistfree')\r\n            markup_pages = types.InlineKeyboardMarkup()\r\n            markup_pages.row(settask)\r\n            markup_pages.row(left,pagination,right)\r\n            bot.send_message(call.message.chat.id,a[data['page']-1]['string'], reply_markup=markup_pages,parse_mode=\"HTML\")\r\n\r\n    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'inlinelistfree')\r\n    def chose_group_executor(call):\r\n        cmd = call.data.split('_')[0]\r\n        \r\n        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:\r\n            a = db.get_free_task(data['group_id'])\r\n            print(a)\r\n            all_pages = data['all_pages']\r\n            cur_page = data['page']\r\n            if cmd == 'right':\r\n                if data['page'] + 1 <= data['all_pages']:\r\n                    data['page']+=1\r\n                    pagination = types.InlineKeyboardButton(f'{data[\"page\"]}/{data[\"all_pages\"]}',callback_data='send_inlinelistfree')\r\n                    settask = types.InlineKeyboardButton('взять',callback_data='settask_inlinelistfree')\r\n                    right = types.InlineKeyboardButton('->',callback_data='right_inlinelistfree')\r\n                    left = types.InlineKeyboardButton('<-',callback_data='left_inlinelistfree')\r\n                    markup_pages = types.InlineKeyboardMarkup()\r\n                    markup_pages.row(settask)\r\n                    markup_pages.row(left,pagination,right)\r\n                    bot.edit_message_text(a[data['page']-1]['string'], reply_markup = markup_pages, chat_id=call.message.chat.id, message_id=call.message.message_id,parse_mode=\"HTML\")\r\n            elif cmd == 'left':\r\n                if data['page'] - 1 > 0:\r\n                    data['page'] -= 1\r\n                    pagination = types.InlineKeyboardButton(f'{data[\"page\"]}/{data[\"all_pages\"]}',callback_data='send_inlinelistfree')\r\n                    settask = types.InlineKeyboardButton('взять',callback_data='settask_inlinelistfree')\r\n                    right = types.InlineKeyboardButton('->',callback_data='right_inlinelistfree')\r\n                    left = types.InlineKeyboardButton('<-',callback_data='left_inlinelistfree')\r\n                    markup_pages = types.InlineKeyboardMarkup()\r\n                    markup_pages.row(settask)\r\n                    markup_pages.row(left,pagination,right)\r\n                    bot.edit_message_text(a[data['page']-1]['string'], reply_markup = markup_pages, chat_id=call.message.chat.id, message_id=call.message.message_id,parse_mode=\"HTML\")\r\n            elif cmd == 'settask':\r\n                db.take_free_task(call.message.chat.id,data['group_id'])\r\n                bot.send_message(call.message.chat.id,\"Вы стали исполнителем таска\")\r\n            elif data['all_pages'] == 0:\r\n                bot.send_message(call.message.chat.id,'У вас нет активных заданий',reply_markup=buttons.zadruk_markup)\r\n                bot.set_state(call.from_user.id, states.Tasks.choseactionmember)\r\n        \r\n    \r\n    @bot.callback_query_handler(func=lambda call: call.data.split('_')[1] == 'inlinelist')\r\n    def chose_group_executor(call):\r\n        cmd = call.data.split('_')[0]\r\n        a = db.get_tasks_user(call.message.chat.id)\r\n        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:\r\n            all_pages = data['all_pages']\r\n            cur_page = data['page']\r\n            if cmd == 'right':\r\n                if data['page'] + 1 <= data['all_pages']:\r\n                    data['page']+=1\r\n                    pagination = types.InlineKeyboardButton(f'{data[\"page\"]}/{data[\"all_pages\"]}',callback_data='send_inlinelist')\r\n                    send = types.InlineKeyboardButton('Сдать',callback_data='send_inlinelist')\r\n                    right = types.InlineKeyboardButton('->',callback_data='right_inlinelist')\r\n                    left = types.InlineKeyboardButton('<-',callback_data='left_inlinelist')\r\n                    markup_pages = types.InlineKeyboardMarkup()\r\n                    markup_pages.row(send)\r\n                    markup_pages.row(left,pagination,right)\r\n                    bot.edit_message_text(a[data['page']-1]['string'], reply_markup = markup_pages, chat_id=call.message.chat.id, message_id=call.message.message_id,parse_mode=\"HTML\")\r\n            elif cmd == 'left':\r\n                if data['page'] - 1 > 0:\r\n                    data['page'] -= 1\r\n                    pagination = types.InlineKeyboardButton(f'{data[\"page\"]}/{data[\"all_pages\"]}',callback_data='send_inlinelist')\r\n                    send = types.InlineKeyboardButton('Сдать',callback_data='send_inlinelist')\r\n                    right = types.InlineKeyboardButton('->',callback_data='right_inlinelist')\r\n                    left = types.InlineKeyboardButton('<-',callback_data='left_inlinelist')\r\n                    markup_pages = types.InlineKeyboardMarkup()\r\n                    markup_pages.row(send)\r\n                    markup_pages.row(left,pagination,right)\r\n                    bot.edit_message_text(a[data['page']-1]['string'], reply_markup = markup_pages, chat_id=call.message.chat.id, message_id=call.message.message_id,parse_mode=\"HTML\")\r\n            elif cmd == 'send':\r\n                bot.set_state(call.from_user.id, states.Tasks.createreview)\r\n                bot.send_message(call.message.chat.id,\"Введите отчёт.\\n\" \r\n                    \"Отчёт должен содержать:\\n\" \r\n                    \"1. Здачу\\n\"\r\n                    \"2. Цель\\n\"\r\n                    \"3. Процесс выполнения\\n\"\r\n                    \"4. Итог\\n\")\r\n                page = int(data['page'])-1\r\n                data['cur_task_id'] = a[page]['task_id']\r\n            elif data['all_pages'] == 0:\r\n                bot.send_message(call.message.chat.id,'У вас нет активных заданий',reply_markup=buttons.zadruk_markup)\r\n                bot.set_state(call.from_user.id, states.Tasks.choseactionmember)\r\n        \r\n        \r\n        \r\n    \r\n    @bot.message_handler(state= states.Tasks.createreview)\r\n    def vlxijvbf(message):\r\n            with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n                    task = data['cur_task_id']\r\n                    db.send_review(task, message.text)\r\n                    bot.send_message(message.chat.id,'Вы успешно сдали отчет',reply_markup=buttons.zadruk_markup)\r\n                    bot.set_state(message.from_user.id, states.Tasks.choseactionmember)\r\n                    \r\n    \r\n    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'executortasks')\r\n    def chose_group_executor(call):\r\n        group_id = call.data.split('_')[1]\r\n        with bot.retrieve_data(call.from_user.id,call.message.chat.id) as data:\r\n            data['group_id'] = group_id\r\n        bot.set_state(call.from_user.id, states.Tasks.name)\r\n        bot.send_message(call.message.chat.id,\"Введите имя таска\")\r\n        \r\n    @bot.message_handler(state= states.Tasks.name)\r\n    def chose_executor_reaction(message):\r\n        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n            data['task_name'] = message.text\r\n        bot.set_state(message.from_user.id, states.Tasks.description)\r\n        bot.send_message(message.chat.id,\"Введите описание\")\r\n        \r\n    @bot.message_handler(state= states.Tasks.description)\r\n    def chose_executor_reaction(message):\r\n        data_task = {}\r\n        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n            data_task['task_description'] = message.text\r\n            data_task['task_name'] = data['task_name']\r\n            data_task['task_group'] = data['group_id']\r\n            data_task['user_id'] = message.chat.id\r\n            data['full_dict'] = data_task\r\n        # db.add_task_user(data_task)\r\n        string = ''\r\n        for key,item in data_task.items():\r\n            string += str(key) + \"=\" + str(item) + \"\\n\"\r\n        bot.send_message(message.chat.id,string,reply_markup=buttons.zadacha_markup)\r\n        bot.set_state(message.from_user.id, states.Tasks.wait)\r\n        \r\n    @bot.message_handler(state= states.Tasks.wait)\r\n    def chose_executor_reaction(message):\r\n        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n            data_parse = data['full_dict']\r\n        if message.text == \"Сохранить\":\r\n            db.add_task_user(data_parse)\r\n            bot.send_message(message.chat.id,'Вы успешно добавили таск',reply_markup=buttons.zadruk_markup)\r\n            bot.set_state(message.from_user.id, states.Tasks.choseactionmember)\r\n        elif message.text == \"Изменить\":\r\n            bot.set_state(message.from_user.id, states.Tasks.choosechange)\r\n            bot.send_message(message.chat.id,'Выберите куда хотите внести изменения',reply_markup=buttons.changing_markup)\r\n        else:\r\n            bot.set_state(message.from_user.id, states.Tasks.choseactionmember)\r\n            bot.send_message(message.chat.id, \"Выберите действие\",reply_markup=buttons.zadruk_markup)\r\n            \r\n            \r\n            \r\n    @bot.message_handler(state= states.Tasks.choosechange)\r\n    def chose_executor_reaction(message):\r\n        if message.text == \"Название\":\r\n            bot.set_state(message.from_user.id, states.Tasks.changename)\r\n            bot.send_message(message.chat.id,'Введите новое имя',reply_markup=None)\r\n            \r\n        else:\r\n            bot.set_state(message.from_user.id, states.Tasks.changedesc)\r\n            bot.send_message(message.chat.id,'Введите новое описание',reply_markup=None)\r\n            \r\n    @bot.message_handler(state= states.Tasks.changename)\r\n    def chose_executor_reaction(message):\r\n        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n            data['full_dict']['task_name'] = message.text\r\n        bot.send_message(message.chat.id,\"Выберите действие\",reply_markup=buttons.zadacha_markup)\r\n        bot.set_state(message.from_user.id, states.Tasks.wait)\r\n        \r\n            \r\n    @bot.message_handler(state= states.Tasks.changedesc)\r\n    def chose_executor_reaction(message):\r\n        with bot.retrieve_data(message.from_user.id,message.chat.id) as data:\r\n            data['full_dict']['task_description'] = message.text\r\n        bot.send_message(message.chat.id,\"Выберите действие\",reply_markup=buttons.zadacha_markup)\r\n        bot.set_state(message.from_user.id, states.Tasks.wait)\r\n            \r\n    \r\n        \r\n    \r\n    bot.add_custom_filter(custom_filters.StateFilter(bot))\r\n    bot.infinity_polling()\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bot/bot.py b/bot/bot.py
--- a/bot/bot.py	(revision 7c0b62b3c4124d86df1aabb3520f2fc7c45a454b)
+++ b/bot/bot.py	(date 1697358977349)
@@ -256,7 +256,7 @@
             markup_pages.row(left,pagination,right)
             bot.send_message(call.message.chat.id,a[data['page']-1]['string'], reply_markup=markup_pages,parse_mode="HTML")
 
-    @bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'inlinelistfree')
+    @bot.callback_query_handler(func=lambda call: call.data.split('_')[1] == 'inlinelistfree')
     def chose_group_executor(call):
         cmd = call.data.split('_')[0]
         
Index: db/file.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/db/file.txt b/db/file.txt
new file mode 100644
--- /dev/null	(date 1697358977355)
+++ b/db/file.txt	(date 1697358977355)
@@ -0,0 +1,1 @@
+Hello motherfucker
\ No newline at end of file
